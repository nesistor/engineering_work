### Documentation: Project Setup and Deployment

---

#### **Local Setup**

##### **Prerequisites**
1. **Install Docker**: Ensure Docker is installed and running on your local machine.
2. **Install Docker Compose**: Verify Docker Compose is installed.
3. **Install Go**: Needed for building binaries (`go` command).
4. **Ensure Make is Installed**: The provided `Makefile` relies on GNU Make.

##### **Services Overview**
The application comprises multiple microservices, including:
- `authentication-service`
- `logger-service`
- `mailer-service`
- `user-service`
- `admin-service`
- Supporting services like `vault`, `redis`, `postgres`, and `mongo`.

##### **Local Setup Steps**

1. **Start All Services**
   Run the following command to start all containers:
   ```bash
   make up
   ```
   This starts services in detached mode (`-d`) using the `docker-compose.yml` file.

2. **Build and Start Fresh**
   To rebuild all services and start them:
   ```bash
   make up_build
   ```

3. **Stop Containers**
   To stop all running containers:
   ```bash
   make down
   ```

4. **Clean Containers and Data**
   Stop and remove all containers and their associated data:
   ```bash
   make down_rm
   ```

5. **Building Individual Binaries**
   Compile service binaries using these commands:
   - Authentication service: `make build_auth`
   - User service: `make build_user`
   - Admin service: `make build_admin`
   - Mailer service: `make build_mail`
   - Logger service: `make build_logger`

6. **Accessing Services Locally**
   | Service               | URL                          |
   |-----------------------|------------------------------|
   | Authentication Service | `http://localhost:8083`      |
   | Logger Service         | `http://localhost:80`        |
   | Mailer Service         | `http://localhost:8085`      |
   | User Service           | `http://localhost:8081`      |
   | Admin Service          | `http://localhost:8082`      |

---

#### **Cloud Deployment**

##### **Prerequisites**
1. **Kubernetes Cluster**: A Kubernetes cluster is required (e.g., GKE).
2. **Helm Installed**: Install Helm for managing deployments.
3. **kubectl Installed**: Kubernetes CLI for applying configurations.
4. **Google Cloud CLI**: Required for interacting with GCP.
5. **Secrets and Configurations**: Ensure Kubernetes secrets (e.g., Vault tokens, database credentials) are set up.

##### **Deployment Pipeline**
The project utilizes a CI/CD pipeline via Jenkins.

###### **Jenkins Pipeline Steps**
1. **Check GCloud Installation**:
   Verifies the presence of `gcloud` CLI.
   
2. **Build and Push Docker Images**:
   Builds images for all services and pushes them to a container registry:
   ```bash
   docker build -t ${DOCKER_REGISTRY}/{service-name}:latest .
   docker push ${DOCKER_REGISTRY}/{service-name}:latest
   ```

3. **Deploy to Kubernetes**:
   Applies Kubernetes manifests using Helm:
   ```bash
   helm upgrade --install my-microservices ./helm-chart -f values.yaml
   ```

##### **Deployment Files**
1. **Helm Chart**:
   The deployment uses Helm charts, with `values.yaml` for configuration. Key components include:
   - Vault (`vault.image.repository` and `.tag`)
   - Consul (`consul.image.repository` and `.tag`)
   - Microservices (`{service-name}.image.repository` and `.tag`)

2. **Kubernetes Manifests**:
   Each service has a deployment YAML file specifying replicas, environment variables, and secrets.

3. **Jenkinsfile**:
   Automates CI/CD pipeline:
   - Build binaries and Docker images.
   - Push images to Google Container Registry (GCR).
   - Deploy services using Helm.

##### **Commands for Manual Deployment**
1. Apply Kubernetes configurations manually:
   ```bash
   kubectl apply -f k8s/configmaps
   kubectl apply -f k8s/secrets
   kubectl apply -f k8s/volumes
   kubectl apply -f k8s/deployments
   kubectl apply -f k8s/services
   ```

2. Monitor deployment status:
   ```bash
   kubectl get all
   ```

3. Clean up:
   ```bash
   kubectl delete -f k8s/
   ```

---

#### **Additional Notes**

- **Vault Integration**: Ensure Vault's root token is stored securely (e.g., in Kubernetes secrets).
- **Database Initialization**: Use Flyway for database migrations during deployment.
- **Testing**: Verify service endpoints are reachable post-deployment.
