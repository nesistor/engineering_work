
**Admin-Service System Documentation**

The Admin-Service System is a microservice responsible for administrator management within a larger system. Its functionalities include admin registration, authentication, password reset, data updates, and inter-service communication via gRPC. The project is implemented in Go and utilizes various technologies and tools such as PostgreSQL, Vault, gRPC, and REST API.

### System Architecture

The service consists of the following components:

- **HTTP REST API**  
  Handles admin registration, login, and management requests.

- **gRPC API**  
  Enables fast and reliable admin authentication for other microservices.

- **PostgreSQL**  
  Stores admin-related data.

- **Vault**  
  Manages keys and secrets, storing configurations and encryption keys.

- **Logger-Service**  
  Logs admin activity and system events.

---

### Functionalities
#### REST API
**Admin Registration**  
- **Endpoint**: `/register`  
- **Method**: POST  
- **Description**: Registers a new admin with provided data (email, password, username).

**Fetch Admin List**  
- **Endpoint**: `/admins`  
- **Method**: GET  
- **Description**: Retrieves a list of all registered admins.

**Email Check**  
- **Endpoint**: `/check-email`  
- **Method**: POST  
- **Description**: Checks if the given email is already registered.

**Password Reset**  
- **Endpoint**: `/reset-password`  
- **Method**: POST  
- **Description**: Sends a password reset link to the specified email address.

**Password Update**  
- **Endpoint**: `/update-password`  
- **Method**: POST  
- **Description**: Updates the admin's password using a provided token and new password.

**Admin Deletion**  
- **Endpoint**: `/delete-admin`  
- **Method**: DELETE  
- **Description**: Deletes an admin by their ID.

---

#### gRPC API
**Admin Validation**  
- **Method**: `ValidateAdmin`  
- **Description**: Verifies the accuracy of admin login credentials (email and password).

---

### Key Management

Encryption keys are stored in Vault and automatically refreshed every hour.

---

### Code Structure

- **`main.go`**  
  Entry point of the application, initializing database and Vault connections, and setting up HTTP and gRPC servers.

- **`handlers.go`**  
  Implements REST API handlers (e.g., registration, login, password reset).

- **`grpc.go`**  
  Contains the gRPC server implementation and the `ValidateAdmin` method.

- **`routes.go`**  
  Defines HTTP REST API routes.

- **`models.go`**  
  Handles database logic (retrieving, inserting, updating, and deleting records).

- **`keys.go`**  
  Manages encryption keys using Vault.

---

### Technologies Used

- **Programming Language**: Go  
- **Database**: PostgreSQL  
- **Inter-Service Communication**: gRPC, REST  
- **Secrets Management**: HashiCorp Vault  
- **Testing & Logging**: Logger-Service  

---

### System Requirements

- PostgreSQL database with the necessary tables for admins and tokens.  
- A configured Vault server with an accessible address and token.  
- A Go environment with the required modules (`pgx`, `grpc`, etc.) specified in `go.mod`.

---

### Deployment Instructions

1. Configure the following environment variables:  
   - `VAULT_ADDR`: Vault server address.  
   - `VAULT_TOKEN`: Vault access token.  
   - `DSN`: PostgreSQL connection string.

---
