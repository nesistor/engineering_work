Authentication Service
Overview

The Authentication Service is responsible for managing user and admin authentication, token generation, and authorization. It integrates with external services for user and admin validation and uses Vault for key management.
Features

    Authentication: Supports user and admin login with email and password.
    Token Management: Generates and refreshes access and refresh tokens.
    Authorization: Verifies user roles and permissions using JWT.
    Token Revocation: Supports token revocation with Redis for blacklisting.
    Logout Functionality: Logs out users and admins by revoking their tokens.

Project Structure

    main.go: Entry point of the application. Initializes the application and configures the HTTP server.
    middleware.go: Defines middleware for authentication and role-based access control.
    routes.go: Configures HTTP routes for the service.
    handlers.go: Contains handler functions for authentication, token validation, and token revocation.
    data (folder): Implements token generation and management, and retrieves public keys from Vault.

Configuration

The service relies on the following environment variables:
Variable	Description	Default Value
REDIS_URL	Address of the Redis server	localhost:6379
VAULT_ADDR	Address of the Vault server	None (required)
VAULT_TOKEN	Authentication token for Vault	None (required)
Setup
Prerequisites

    Go 1.19+
    Redis
    Vault

Installation

    Clone the repository:

git clone https://github.com/your-repo/auth-service.git
cd auth-service

Install dependencies:

go mod tidy

Set the required environment variables:

    export REDIS_URL="redis:6379"
    export VAULT_ADDR="http://vault:8200"
    export VAULT_TOKEN="your-vault-token"

Running the Service

    Start the application:

    go run main.go

    The service will run on port 80 by default.

Endpoints
Public Endpoints

    POST /api/auth/login
    Authenticate a user and generate access and refresh tokens.
    Request Body:

{
  "email": "user@example.com",
  "password": "password123"
}

Response:

    {
      "access_token": "token",
      "refresh_token": "token"
    }

    POST /api/admin/login
    Authenticate an admin and generate access and refresh tokens.

    POST /api/auth/refresh
    Refresh an access token using a refresh token.

Protected Endpoints

Require a valid token in the Authorization header.

    POST /api/auth/revoke
    Revoke a token, making it invalid for future use.

    POST /auth/logout
    Logout a user or admin by revoking their token.

Middleware

The service uses middleware for authentication and role-based access control. The AuthMiddleware function ensures that only authorized users or admins can access protected endpoints.
Logging

The service logs operations to an external logger service (logger-service) using the logRequest function.
Token Management

The application uses JWT for token management:

    Access Tokens: Short-lived tokens for authentication.
    Refresh Tokens: Long-lived tokens to issue new access tokens.

Public keys for verifying JWTs are retrieved from Vault.v