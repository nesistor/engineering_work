SHELL=cmd.exe
AUTH_BINARY=authApp
USER_BINARY=userApp
ADMIN_BINARY=adminApp
MAIL_BINARY=mailApp
LOGGER_BINARY=loggerApp

## up: starts all containers in the background without forcing build
up:
    @echo Starting Docker images...
    docker-compose up -d
    @echo Docker images started!

## up_build: stops docker-compose (if running), builds all projects and starts docker compose
up_build: build_broker build_auth build_logger build_mail build_listener
    @echo Stopping docker images (if running...)
    docker-compose down
    @echo Building (when required) and starting docker images...
    docker-compose up --build -d
    @echo Docker images built and started!

## down: stop docker compose
down:
    @echo Stopping docker compose...
    docker-compose down
    @echo Done!



## build_auth: builds the auth binary as a linux executable
build_auth:
    @echo Building auth binary...
    chdir ..\auth-service && set GOOS=linux&& set GOARCH=amd64&& set CGO_ENABLED=0 && go build -o ${AUTH_BINARY} ./cmd/api
    @echo Done!

## build_user: builds the user binary as a linux executable
build_user:
    @echo Building user binary...
    chdir ..\user-service && set GOOS=linux&& set GOARCH=amd64&& set CGO_ENABLED=0 && go build -o ${USER_BINARY} ./cmd/api
    @echo Done!

## build_mail: builds the mail binary as a linux executable
build_mail:
    @echo Building mail binary...
    chdir ..\mail-service && set GOOS=linux&& set GOARCH=amd64&& set CGO_ENABLED=0 && go build -o ${MAIL_BINARY} ./cmd/api
    @echo Done!

## build_logger: builds the logger binary as a linux executable
build_logger:
    @echo Building logger binary...
    chdir ..\logger-service && set GOOS=linux&& set GOARCH=amd64&& set CGO_ENABLED=0 && go build -o ${LOGGER_BINARY} ./cmd/api
    @echo Done!

## build_admin: builds the admin binary as a linux executable
build_admin:
    @echo Building admin binary...
    chdir ..\admin-service && set GOOS=linux&& set GOARCH=amd64&& set CGO_ENABLED=0 && go build -o ${ADMIN_BINARY} ./cmd/api
    @echo Done!

