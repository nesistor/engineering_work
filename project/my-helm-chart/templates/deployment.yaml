apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-vault
  labels:
    app: vault
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: vault
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: vault
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: gcr-json-key
      initContainers:
        - name: vault-init
          image: "{{ .Values.vault.image.repository }}:{{ .Values.vault.image.tag }}"
          command:
            - "sh"
            - "-c"
            - |
              echo "Initializing Vault with keys and policies..."
              sleep 30  # Wstrzymaj na 30 sekund, aby Vault zdążył się uruchomić
              vault secrets enable -path=jwt_keys kv
              vault policy write jwt_policy /vault/secrets/jwt_policy.hcl
              vault kv put jwt_keys/public_keys public_key=/vault/secrets/public_key.pem
              vault kv put jwt_keys/private_key private_key=/vault/secrets/private_key.pem

          volumeMounts:
            - name: vault-files-volume
              mountPath: /vault/secrets  # Miejsce montowania plików w kontenerze
      containers:
        - name: vault
          image: "{{ .Values.vault.image.repository }}:{{ .Values.vault.image.tag }}"
          ports:
            - containerPort: 8200
          env:
            - name: VAULT_ADDR
              value: "{{ .Values.vault.environment.VAULT_ADDR }}"
            - name: VAULT_API_ADDR
              value: "http://microservices-vault-service.microservices-app.svc.cluster.local:8200"
            - name: VAULT_DEV_ROOT_TOKEN_ID
              value: "{{ .Values.vault.environment.VAULT_DEV_ROOT_TOKEN_ID }}"
          command: ["vault", "server", "-dev", "-dev-root-token-id=root_token"]
          securityContext:
            capabilities:
              add: ["IPC_LOCK"]
          volumeMounts:
            - name: vault-data
              mountPath: /vault/data
            - name: vault-files-volume
              mountPath: /vault/secrets  # Miejsce montowania plików w kontenerze
      volumes:
        - name: vault-data
          emptyDir: {}
        - name: vault-files-volume
          secret:
            secretName: vault-files-secret  # Referencja do sekretu zawierającego pliki

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-authentication-service
  labels:
    app: authentication-service
    release: {{ .Release.Name }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: authentication-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: authentication-service
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: gcr-json-key
      containers:
        - name: authentication-service
          image: "{{ .Values.authenticationService.image.repository }}:{{ .Values.authenticationService.image.tag }}"
          ports:
            - containerPort: 8083
          env:
            - name: REDIS_URL
              value: "{{ .Values.authenticationService.environment.REDIS_URL }}"
            - name: VAULT_ADDR
              value: "{{ .Values.authenticationService.environment.VAULT_ADDR }}"
            - name: VAULT_TOKEN
              value: "{{ .Values.authenticationService.environment.VAULT_TOKEN }}"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-logger-service
  labels:
    app: logger-service
    release: {{ .Release.Name }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: logger-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: logger-service
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: gcr-json-key
      containers:
        - name: logger-service
          image: "{{ .Values.loggerService.image.repository }}:{{ .Values.loggerService.image.tag }}"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mailer-service
  labels:
    app: mailer-service
    release: {{ .Release.Name }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: mailer-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: mailer-service
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: gcr-json-key
      containers:
        - name: mailer-service
          image: "{{ .Values.mailerService.image.repository }}:{{ .Values.mailerService.image.tag }}"
          ports:
            - containerPort: 8085
          env:
            - name: MAIL_DOMAIN
              value: "{{ .Values.mailerService.environment.MAIL_DOMAIN }}"
            - name: MAIL_HOST
              value: "{{ .Values.mailerService.environment.MAIL_HOST }}"
            - name: MAIL_PORT
              value: "{{ .Values.mailerService.environment.MAIL_PORT }}"
            - name: MAIL_ENCRYPTION
              value: "{{ .Values.mailerService.environment.MAIL_ENCRYPTION }}"
            - name: MAIL_USERNAME
              value: "{{ .Values.mailerService.environment.MAIL_USERNAME }}"
            - name: MAIL_PASSWORD
              value: "{{ .Values.mailerService.environment.MAIL_PASSWORD }}"
            - name: FROM_NAME
              value: "{{ .Values.mailerService.environment.FROM_NAME }}"
            - name: FROM_ADDRESS
              value: "{{ .Values.mailerService.environment.FROM_ADDRESS }}"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-user-service
  labels:
    app: user-service
    release: {{ .Release.Name }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: user-service
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: gcr-json-key
      containers:
        - name: user-service
          image: "{{ .Values.userService.image.repository }}:{{ .Values.userService.image.tag }}"
          ports:
            - containerPort: 8081
            - containerPort: 50001
          env:
            - name: DSN
              value: "{{ .Values.userService.environment.DSN }}"
            - name: VAULT_ADDR
              value: "{{ .Values.userService.environment.VAULT_ADDR }}"
            - name: VAULT_TOKEN
              value: "{{ .Values.userService.environment.VAULT_TOKEN }}"

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-admin-service
  labels:
    app: admin-service
    release: {{ .Release.Name }}
spec:
  replicas: 2
  selector:
    matchLabels:
      app: admin-service
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: admin-service
        release: {{ .Release.Name }}
    spec:
      imagePullSecrets:
        - name: gcr-json-key
      containers:
        - name: admin-service
          image: "{{ .Values.adminService.image.repository }}:{{ .Values.adminService.image.tag }}"
          ports:
            - containerPort: 8082
            - containerPort: 50002
          env:
            - name: DSN
              value: "{{ .Values.adminService.environment.DSN }}"
            - name: VAULT_ADDR
              value: "{{ .Values.adminService.environment.VAULT_ADDR }}"
            - name: VAULT_TOKEN
              value: "{{ .Values.adminService.environment.VAULT_TOKEN }}"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-redis
  labels:
    app: redis
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: redis
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          ports:
            - containerPort: 6379

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgres-users
  labels:
    app: postgres-users
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-users
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: postgres-users
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: postgres-users
          image: "{{ .Values.postgresUsers.image.repository }}:{{ .Values.postgresUsers.image.tag }}"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.postgresUsers.environment.POSTGRES_USER }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.postgresUsers.environment.POSTGRES_PASSWORD }}"
            - name: POSTGRES_DB
              value: "{{ .Values.postgresUsers.environment.POSTGRES_DB }}"
          volumeMounts:
            - name: postgres-users-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-users-data
          emptyDir: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-postgres-admins
  labels:
    app: postgres-admins
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-admins
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: postgres-admins
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: postgres-admins
          image: "{{ .Values.postgresAdmins.image.repository }}:{{ .Values.postgresAdmins.image.tag }}"
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "{{ .Values.postgresAdmins.environment.POSTGRES_USER }}"
            - name: POSTGRES_PASSWORD
              value: "{{ .Values.postgresAdmins.environment.POSTGRES_PASSWORD }}"
            - name: POSTGRES_DB
              value: "{{ .Values.postgresAdmins.environment.POSTGRES_DB }}"
          volumeMounts:
            - name: postgres-admins-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-admins-data
          emptyDir: {}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mongo
  labels:
    app: mongo
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongo
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: mongo
        release: {{ .Release.Name }}
    spec:
      containers:
        - name: mongo
          image: "{{ .Values.mongo.image.repository }}:{{ .Values.mongo.image.tag }}"
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_DATABASE
              value: "{{ .Values.mongo.environment.MONGO_INITDB_DATABASE }}"
            - name: MONGO_INITDB_ROOT_USERNAME
              value: "{{ .Values.mongo.environment.MONGO_INITDB_ROOT_USERNAME }}"
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: "{{ .Values.mongo.environment.MONGO_INITDB_ROOT_PASSWORD }}"
          volumeMounts:
            - name: mongo-data
              mountPath: /data/db
      volumes:
        - name: mongo-data
          emptyDir: {}
