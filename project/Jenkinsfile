pipeline {
    agent any

    environment {
        GCP_PROJECT = "my-microservices-app"
        GKE_CLUSTER = "my-gke-cluster"
        GKE_ZONE = "us-central1-a"
        DOCKER_REGISTRY = "us-central1-docker.pkg.dev/${GCP_PROJECT}/my-microservices-repo"
        KUBECTL_PATH = "/usr/local/bin/kubectl"
        KUBECONFIG = "/var/lib/jenkins/.kube/config"
        GCLOUD_PATH = "/var/lib/jenkins/google-cloud-sdk/bin"
        PATH = "/var/lib/jenkins/google-cloud-sdk/bin:$PATH"  // Adding gcloud to PATH
    }

    stages {
        stage('Check if gcloud is installed') {
            steps {
                script {
                    def gcloudCheck = sh(script: 'which gcloud', returnStatus: true)
                    if (gcloudCheck != 0) {
                        error 'gcloud is not installed or not found in PATH'
                    } else {
                        echo 'gcloud is installed and available in PATH'
                    }
                }
            }
        }

        stage('Authenticate to Google Cloud') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcloud-credentials', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        sh """
                            echo "Authenticating with Google Cloud..."
                            gcloud auth activate-service-account --key-file=\${GOOGLE_APPLICATION_CREDENTIALS}
                            gcloud config set project \${GCP_PROJECT}
                        """
                    }
                }
            }
        }

        stage('Test Connection to GCR') {
            steps {
                script {
                    echo "Testing connection to Google Container Registry..."
                    sh """
                        gcloud auth configure-docker us-central1-docker.pkg.dev
                        docker pull ${DOCKER_REGISTRY}/auth-service:latest || echo 'Error pulling image from GCR'
                    """
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = [
                        'auth-service': 'auth-service.dockerfile',
                        'user-service': 'user-service.dockerfile',
                        'admin-service': 'admin-service.dockerfile',
                        'mail-service': 'mail-service.dockerfile',
                        'logger-service': 'logger-service.dockerfile',
                        'flyway': 'flyway.dockerfile'
                    ]
                    
                    services.each { service, dockerfile ->
                        dir("./${service}") {
                            sh """
                                echo "Building Docker image for ${service}..."
                                docker build -t ${DOCKER_REGISTRY}/${service}:latest -f ${dockerfile} .
                            """
                        }
                    }
                }
            }
        }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    sh "gcloud auth configure-docker us-central1-docker.pkg.dev"
                    
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service', 'flyway']
                    
                    services.each { service ->
                        sh """
                            echo "Tagging and pushing Docker image for ${service}..."
                            docker tag ${DOCKER_REGISTRY}/${service}:latest ${DOCKER_REGISTRY}/${service}:latest
                            docker push ${DOCKER_REGISTRY}/${service}:latest
                        """
                    }
                }
            }
        }

        stage('Create Kubernetes Secret for GCR') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcloud-credentials', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        sh """
                            echo "Creating Kubernetes secret for GCR..."
                            kubectl create secret docker-registry gcr-json-key \
                            --docker-server=us-central1-docker.pkg.dev \
                            --docker-username=_json_key \
                            --docker-password="\$(cat \${GOOGLE_APPLICATION_CREDENTIALS} | tr -d '\\n')" \
                            --docker-email=youremail@example.com --dry-run=client -o yaml | kubectl apply -f -
                        """
                    }
                }
            }
        }

        stage('Install gke-gcloud-auth-plugin') {
            steps {
                script {
                    sh """
                        echo "Installing gke-gcloud-auth-plugin..."
                        gcloud components install gke-gcloud-auth-plugin -q
                    """
                }
            }
        }

        stage('Deploy with kubectl') {
            steps {
                script {
                    sh """
                        echo "Setting up kubeconfig to use gke-gcloud-auth-plugin..."
                        export USE_GKE_GCLOUD_AUTH_PLUGIN=True
                        gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${GCP_PROJECT}
                        
                        echo "Checking if microservices-app namespace exists..."
                        kubectl get namespaces | grep microservices-app || kubectl create namespace microservices-app
                        
                        echo "Deleting old Kubernetes resources if they exist..."
                        kubectl delete -f ./project/k8s-config || echo "No old resources found"

                        echo "Deploying Kubernetes resources..."
                        kubectl apply -f ./project/k8s-config
                    """
                }
            }
        }
    }
}
