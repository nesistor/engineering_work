pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                sh "echo 'Current directory: '; pwd"
                sh "echo 'Files in workspace:'; ls -la"
            }
        }
        
        stage('Debug Auth Service') {
            steps {
                dir("./auth-service") {
                    sh "echo 'Current directory for auth-service: '; pwd"
                    sh "echo 'Files in auth-service:'; ls -la"
                }
            }
        }
        
        stage('Build auth-service') {
            steps {
                dir("./auth-service") {
                    sh """
                        echo "Building auth-service binary..."
                        env GOOS=linux CGO_ENABLED=0 go build -o authApp ./cmd/api
                        echo "Built auth-service binary!"
                    """
                }
            }
        }

        stage('Build Applications') {
            steps {
                script {
                    def binaries = [
                        'auth-service': 'authApp',
                        'user-service': 'userApp',
                        'admin-service': 'adminApp',
                        'mail-service': 'mailApp',
                        'logger-service': 'loggerApp'
                    ]
                    
                    binaries.each { service, binaryName ->
                        dir("./${service}") {
                            sh """
                                echo "Building ${service} binary..."
                                env GOOS=linux CGO_ENABLED=0 go build -o ${binaryName} ./cmd/api
                                echo "Built ${service} binary!"
                            """
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service']
                    
                    services.each { service ->
                        dir("./${service}") {
                            sh "docker build -t ${DOCKER_REGISTRY}/${service}:latest -f ${service}.dockerfile ."
                        }
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                script {
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service']
                    
                    services.each { service ->
                        sh "docker push ${DOCKER_REGISTRY}/${service}:latest"
                    }
                }
            }
        }
        
        stage('Deploy with Helm') {
            steps {
                script {
                    sh "${HELM_PATH} upgrade --install my-app ./microservices-chart --namespace your-namespace --set image.tag=latest"
                }
            }
        }
    }
}
