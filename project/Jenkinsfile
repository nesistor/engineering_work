pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = "localhost:5000"
        KUBECTL_PATH = "/usr/local/bin/kubectl"
        HELM_PATH = "/usr/local/bin/helm"  
        KUBECONFIG = credentials('K8S_CONFIG')
    }
    stages {
        stage('Build Applications') {
            steps {
                script {
                    def binaries = [
                        'auth-service': 'authApp',
                        'user-service': 'userApp',
                        'admin-service': 'adminApp',
                        'mail-service': 'mailApp',
                        'logger-service': 'loggerApp'
                    ]
                    
                    binaries.each { service, binaryName ->
                        dir("./${service}") {
                            sh """
                                echo "Building ${service} binary..."
                                env GOOS=linux CGO_ENABLED=0 go build -o ${binaryName} ./cmd/api
                                echo "Built ${service} binary!"
                            """
                        }
                    }
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service']
                    
                    services.each { service ->
                        dir("./${service}") {
                            sh "docker build -t ${DOCKER_REGISTRY}/${service}:latest -f ${service}.dockerfile ."
                        }
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                script {
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service']
                    
                    services.each { service ->
                        sh "docker push ${DOCKER_REGISTRY}/${service}:latest"
                    }
                }
            }
        }
        
        stage('Deploy with Helm') {
            steps {
                script {
                    sh sudo "${HELM_PATH} upgrade --install microservices ./microservices-chart --namespace microservices-app --set image.tag=latest --debug"
                }
            }
        }
    }
}
