pipeline {
    agent any

    environment {
        GCP_PROJECT = "my-microservices-app" 
        GKE_CLUSTER = "my-gke-cluster"
        GKE_ZONE = "us-central1-a"  
        DOCKER_REGISTRY = "gcr.io/${GCP_PROJECT}"  
        HELM_PATH = "/usr/local/bin/helm"
        KUBECTL_PATH = "/usr/local/bin/kubectl"
        KUBECONFIG = "/var/lib/jenkins/.kube/config"  
    }

    stages {
        // Testowanie poświadczeń Google Cloud
        stage('Test Google Credentials') {
            steps {
                script {
                    // Użycie poświadczeń Google Cloud Service Account
                    withCredentials([[$class: 'GoogleServiceAccountCredentialsBinding', credentialsId: 'gcloud-credentials']]) {
                        sh """
                            echo "Testing Google Cloud credentials..."
                            gcloud auth activate-service-account --key-file=\${GOOGLE_APPLICATION_CREDENTIALS}
                            gcloud config set project \${GCP_PROJECT}
                            gcloud config list project  // Sprawdzanie aktualnego projektu
                        """
                    }
                }
            }
        }

        // Krok logowania do Google Cloud
        stage('Login to Google Cloud') {
            steps {
                script {
                    // Użycie poświadczeń Google Cloud Service Account
                    withCredentials([[$class: 'GoogleServiceAccountCredentialsBinding', credentialsId: 'gcloud-credentials']]) {
                        sh """
                            gcloud auth activate-service-account --key-file=\${GOOGLE_APPLICATION_CREDENTIALS}
                            gcloud config set project \${GCP_PROJECT}
                        """
                    }
                }
            }
        }

        stage('Build Applications') {
            steps {
                script {
                    def binaries = [
                        'auth-service': 'authApp',
                        'user-service': 'userApp',
                        'admin-service': 'adminApp',
                        'mail-service': 'mailApp',
                        'logger-service': 'loggerApp'
                    ]
                    
                    binaries.each { service, binaryName ->
                        dir("./${service}") {
                            sh """
                                echo "Building ${service} binary..."
                                env GOOS=linux CGO_ENABLED=0 go build -o ${binaryName} ./cmd/api
                                echo "Built ${service} binary!"
                            """
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service']
                    
                    services.each { service ->
                        dir("./${service}") {
                            sh "docker build -t ${DOCKER_REGISTRY}/${service}:latest -f ${service}.dockerfile ."
                        }
                    }
                }
            }
        }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    def services = ['auth-service', 'user-service', 'admin-service', 'mail-service', 'logger-service']
                    
                    services.each { service ->
                        sh "docker tag ${DOCKER_REGISTRY}/${service}:latest ${DOCKER_REGISTRY}/${service}:latest"
                        sh "docker push ${DOCKER_REGISTRY}/${service}:latest"
                    }
                }
            }
        }

        stage('Deploy with Helm') {
            steps {
                script {
                    sh "gcloud container clusters get-credentials ${GKE_CLUSTER} --zone ${GKE_ZONE} --project ${GCP_PROJECT}"
                    sh "${HELM_PATH} upgrade --install microservices ./my-helm-chart --namespace microservices-app --set image.tag=latest --debug"
                }
            }
        }
    }
}
